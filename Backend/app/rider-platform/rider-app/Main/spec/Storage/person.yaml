imports:
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  City: Kernel.Types.Beckn.Context
  EncryptedHashedField: Kernel.External.Encryption
  DbHash: Kernel.External.Encryption
  Centesimal: Kernel.Types.Common
  Version : Kernel.Types.Version
  OptApiMethods: Kernel.External.Whatsapp.Interface.Types
  MerchantConfig: Domain.Types.MerchantConfig
  Language: Kernel.External.Maps
  LocalTime: Data.Time

Person:
  tableName: person

  types:
    Role:
      enum: "USER, CUSTOMER_SUPPORT"
      derive': "Show, Eq, Ord, Read, Generic, ToJSON, FromJSON, ToSchema,ToParamSchema"

    IdentifierType:
      enum: "MOBILENUMBER, AADHAAR, EMAIL"
      derive': "Show, Eq, Read, Ord, Generic, ToJSON, FromJSON,ToParamSchema"

    Gender:
      enum: "MALE, FEMALE, OTHER, UNKNOWN, PREFER_NOT_TO_SAY"
      derive': "Show, Eq, Ord, Read, Generic, ToJSON, FromJSON, ToSchema,ToParamSchema"

    RideShareOptions:
      enum: "ALWAYS_SHARE, SHARE_WITH_TIME_CONSTRAINTS, NEVER_SHARE"
      derive': "Show, Eq, Ord, Read, Generic, ToJSON, FromJSON, ToSchema, ToParamSchema"

  fields:
    id : Id Person
    firstName : Maybe Text
    middleName : Maybe Text
    lastName : Maybe Text
    role : Role
    gender : Gender
    identifierType : IdentifierType
    email : Maybe (EncryptedHashedField e Text)
    unencryptedMobileNumber : Maybe Text
    mobileNumber : Maybe (EncryptedHashedField e Text)
    mobileCountryCode : Maybe Text
    passwordHash : Maybe DbHash
    identifier : Maybe Text
    rating : Maybe Centesimal
    totalRatings : Int
    totalRatingScore : Int
    isValidRating : Bool
    language : Maybe Language
    isNew : Bool
    enabled : Bool
    blocked : Bool
    deviceToken : Maybe Text
    notificationToken : Maybe Text
    description : Maybe Text
    merchantId : Id Merchant
    currentCity : City
    merchantOperatingCityId : Id MerchantOperatingCity
    whatsappNotificationEnrollStatus : Maybe OptApiMethods
    referralCode : Maybe Text
    referredAt : Maybe UTCTime
    hasTakenValidRide : Bool
    hasDisability : Maybe Bool
    blockedAt : Maybe UTCTime
    blockedByRuleId : Maybe (Id MerchantConfig)
    aadhaarVerified : Bool
    createdAt : UTCTime
    updatedAt : UTCTime
    bundleVersion : Maybe Version
    clientVersion : Maybe Version
    shareEmergencyContacts : Bool
    nightSafetyChecks : Bool
    shareTripWithEmergencyContactOption : Maybe RideShareOptions
    hasCompletedMockSafetyDrill : Maybe Bool
    hasCompletedSafetySetup : Bool
    registrationLat : Maybe Double
    registrationLon : Maybe Double
    useFakeOtp : Maybe Text
    followsRide : Bool
    falseSafetyAlarmCount : Int
    safetyCenterDisabledOnDate : Maybe UTCTime
    referredByCustomer: Maybe Text
    customerReferralCode: Maybe Text

  domainInstance:
    - Custom Kernel.Utils.TH.mkFromHttpInstanceForEnum <Role>
    - Custom Kernel.Beam.Lib.UtilsTH.mkBeamInstancesForEnumAndList <Role>
    - Custom Kernel.Utils.TH.mkFromHttpInstanceForEnum <IdentifierType>
    - Custom Kernel.Beam.Lib.UtilsTH.mkBeamInstancesForEnumAndList <IdentifierType>
    - Custom Kernel.Beam.Lib.UtilsTH.mkBeamInstancesForEnumAndList <Gender>
    - Custom Kernel.Utils.TH.mkFromHttpInstanceForEnum <Gender>
    - Custom Kernel.Beam.Lib.UtilsTH.mkBeamInstancesForEnumAndList <RideShareOptions>
    - Custom Kernel.Utils.TH.mkFromHttpInstanceForEnum <RideShareOptions>

  beamFields:
    mobileNumber:
      mobileNumberEncrypted: Maybe Text
      mobileNumberHash: Maybe DbHash
    email:
      emailEncrypted: Maybe Text
      emailHash: Maybe DbHash
  intermediateTransformers:
      fromTType:
      - updateMerchantOpIdAndCity: Storage.Queries.Transformers.Person.backfillCityAndMOCId currentCity merchantOperatingCityId merchantId|EM
  beamType:
    currentCity: Maybe City
    bundleVersion: Maybe Text
    clientVersion: Maybe Text
    merchantOperatingCityId: Maybe Text
    blockedAt: Maybe LocalTime
    falseSafetyAlarmCount: Maybe Int

  fromTType:
    bundleVersion: mapM Kernel.Utils.Version.readVersion (Data.Text.strip <$> bundleVersion)|EM
    clientVersion: mapM Kernel.Utils.Version.readVersion (Data.Text.strip <$> clientVersion)|EM
    merchantOperatingCityId: Kernel.Prelude.fst updateMerchantOpIdAndCity|E
    currentCity: Kernel.Prelude.snd updateMerchantOpIdAndCity|E
    email: EncryptedHashed <$> (Encrypted <$> emailEncrypted) <*> emailHash|E
    mobileNumber: EncryptedHashed <$> (Encrypted <$> mobileNumberEncrypted) <*> mobileNumberHash|E
    blockedAt: Data.Time.localTimeToUTC Data.Time.utc <$> blockedAt|E
    falseSafetyAlarmCount: fromMaybe 0 falseSafetyAlarmCount|E
    rating: Just $ fromIntegral totalRatingScore / fromIntegral totalRatings|E

  toTType:
    blockedAt: (Data.Time.utcToLocalTime Data.Time.utc <$> blockedAt)|E
    currentCity: Just
    bundleVersion: Kernel.Prelude.fmap Kernel.Utils.Version.versionToText|I
    clientVersion: Kernel.Prelude.fmap Kernel.Utils.Version.versionToText|I
    emailEncrypted: (email <&> unEncrypted . (.encrypted))|E
    emailHash: (email <&> (.hash))|E
    mobileNumberEncrypted: (mobileNumber <&> unEncrypted . (.encrypted))|E
    mobileNumberHash: (mobileNumber <&> (.hash))|E
    merchantOperatingCityId: (Kernel.Prelude.Just . Kernel.Types.Id.getId)|I
    falseSafetyAlarmCount: (Just falseSafetyAlarmCount)|E

  constraints:
    id: PrimaryKey
    mobileNumberHash: SecondaryKey
    emailHash: SecondaryKey
    referralCode: SecondaryKey
    deviceToken: SecondaryKey

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

    updateMultiple:
      kvFunction: updateOneWithKV
      params: [updatedAt, firstName, middleName, lastName, gender, description, role, identifier, deviceToken, clientVersion, bundleVersion]
      where: id

    updateAverageRating:
      kvFunction: updateOneWithKV
      params: [totalRatings, totalRatingScore, isValidRating, updatedAt]
      where: id

    updateDeviceToken:
      kvFunction: updateWithKV
      params: [deviceToken, updatedAt]
      where: id

    updateWhatsappNotificationEnrollStatus:
      kvFunction: updateWithKV
      params: [whatsappNotificationEnrollStatus, updatedAt]
      where: id

    setIsNewFalse:
      kvFunction: updateWithKV
      params: [isNew, updatedAt]
      where: id

    deleteById:
      kvFunction: deleteWithKV
      where: id

    updateIsValidRating:
      kvFunction: updateWithKV
      params: [isValidRating, updatedAt]
      where: id

    updateHasDisability:
      kvFunction: updateWithKV
      params: [hasDisability, updatedAt]
      where: id

    updateReferralCodeAndReferredAt:
      kvFunction: updateWithKV
      params: [referredAt, referralCode, updatedAt]
      where: id

    findByReferralCode:
      kvFunction: findOneWithKV
      where: referralCode

    updateBlockedState:
      kvFunction: updateWithKV
      params: [blocked, updatedAt]
      where: id

    updateAadhaarVerifiedState:
      kvFunction: updateOneWithKV
      params: [aadhaarVerified, updatedAt]
      where: id

    updateFollowsRide:
      kvFunction: updateWithKV
      params: [followsRide, updatedAt]
      where: id

    updateSafetyDrillStatus:
      kvFunction: updateWithKV
      params: [hasCompletedMockSafetyDrill, updatedAt]
      where: id

    findPersonByCustomerReferralCode:
      kvFunction: findOneWithKV
      where: customerReferralCode

  extraOperations:
    - EXTRA_QUERY_FILE

  excludedFields: [merchantOperatingCityId]