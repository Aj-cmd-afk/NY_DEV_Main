imports:
  MerchantOperatingCity: Domain.Types.Merchant.MerchantOperatingCity
  CreateOrderResp: Kernel.External.Payment.Interface

module:
  name: TicketService
  types:
    TicketServiceResp:
      id: Id TicketService
      placesId: Id Place
      name: Text
      maxVerification: Int
      allowFutureBooking: Bool
      expiry: ExpiryType
      businessHours: [BusinessHourResp]

    BusinessHourResp:
      id: Id BusinessHour
      slot: Maybe TimeOfDay
      startTime: Maybe TimeOfDay
      endTime: Maybe TimeOfDay
      specialDayDescription: Maybe Text
      specialDayType: SpecialDayType
      operationalDays: "[Text]"
      categories: "[CategoriesResp]"

    CategoriesResp:
      name: Text
      id: Id ServiceCategory
      availableSeats: Maybe Int
      allowedSeats: Maybe Int
      bookedSeats: Int
      peopleCategories: [PeopleCategoriesResp]

    PeopleCategoriesResp:
      id: Id ServicePeopleCategory
      name: Text
      pricePerUnit: HighPrecMoney

    TicketBookingReq:
      visitDate: Maybe Day
      services: TicketBookingServicesReq

    TicketBookingServicesReq:
      serviceId: Id TicketService
      businessHourId: Id BusinessHour
      categories: [TicketBookingCategoryReq]

    TicketBookingCategoryReq:
      categoryId: Id ServiceCategory
      peopleCategories: [TicketBookingPeopleCategoryReq]

    TicketBookingPeopleCategoryReq:
      peopleCategoryId: Id ServicePeopleCategory
      numberOfUnits: Int

    TicketBookingAPIEntity:
      ticketShortId: Text
      ticketPlaceId: Text
      ticketPlaceName: Text
      personId: Text
      amount: HighPrecMoney
      visitDate: Day
      status: BookingStatus

    TicketBookingDetails:
      ticketShortId: Text
      ticketPlaceId: Text
      ticketPlaceName: Text
      personId: Text
      amount: HighPrecMoney
      visitDate: Day
      status: BookingStatus
      services: [TickectBookingServiceDetails]

    TickectBookingServiceDetails:
      serviceShortId: Text
      ticketServiceName: Text
      amount : HighPrecMoney
      status : ServiceStatus
      verificationCount : Int
      slot: Maybe TimeOfDay
      expiryDate : Maybe UTCTime
      categories : [TicketBookingCategoryDetails]

    TicketBookingCategoryDetails :
      name : Text
      bookedSeats: Int
      amount: HighPrecMoney
      peopleCategories : [TicketBookingPeopleCategoryDetails]

    TicketBookingPeopleCategoryDetails:
      name : Text
      pricePerUnit : HighPrecMoney
      numberOfUnits : Int

    TicketBookingUpdateSeatsReq:
      ticketServiceId: Id TicketService
      date: Day
      businessHourId: Id BusinessHour
      categoryId: Id ServiceCategory
      updatedBookedSeats: Int

  API:
    # GET /ticket/places
    - GET:
        endpoint: /ticket/places
        auth: TokenAuth
        response: [TicketPlace]

    # GET /ticket/places/{placeId}/services
    - GET:
        endpoint: /v2/ticket/places/{placeId}/services
        auth: TokenAuth
        params:
          placeId: Id TicketPlace
        response: [TicketServiceResp]

    # POST /ticket/places/{placeId}/book
    - POST:
        endpoint: /v2/ticket/places/{placeId}/book
        auth: TokenAuth
        params:
          placeId: Id TicketPlace
        request: TicketBookingReq
        response: CreateOrderResp

    # GET /ticket/places/bookings
    - GET:
        endpoint: /ticket/places/bookings
        auth: TokenAuth
        query:
          limit: Int
          offset: Int
        mandatoryQuery:
          status: BookingStatus
        response: [TicketBookingAPIEntity]

    # GET /ticket/places/bookings/{ticketBookingShortId}/details
    - GET:
        endpoint: /v2/ticket/places/bookings/{ticketBookingShortId}/details
        auth: TokenAuth
        params:
          ticketBookingShortId: ShortId TicketBooking
        response: TicketBookingDetails

    # POST /ticket/places/bookings/{personServiceId}/{ticketServiceShortId}/verify
    - POST:
        endpoint: /ticket/places/bookings/{personServiceId}/{ticketServiceShortId}/verify
        auth: TokenAuth
        params:
          personServiceId: Id TicketService
          ticketServiceShortId: ShortId TicketBookingService
        response: TicketServiceVerificationResp

    # GET /ticket/places/bookings/{ticketBookingShortId}/status
    - GET:
        endpoint: /ticket/places/bookings/{ticketBookingShortId}/status
        auth: TokenAuth
        params:
          ticketBookingShortId: ShortId TicketBooking
        response: BookingStatus

    # dashboard APIs
    - POST:
        endpoint: /ticket/places/bookings/update/seats
        auth: TokenAuth
        request: TicketBookingUpdateSeatsReq
        response: APISuccess
