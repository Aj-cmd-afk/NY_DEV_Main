imports:
  Text: Data.Text
  Merchant: Domain.Types.Merchant
  Subscriber: Kernel.Types.Registry.Subscriber
  SearchReqV2: Beckn.Types.Core.Taxi.API.Search
  SearchReqMessage: BecknV2.OnDemand.Types
  DSearchReq: Domain.Action.Beckn.Search
  getIntent: Beckn.OnDemand.Utils.Common
  getFulfillment: Beckn.OnDemand.Utils.Common
  getFulfillmentStops: Beckn.OnDemand.Utils.Common
  getCurrentTime: Kernel.Types.Common
  Address: Beckn.Types.Core.Taxi.Common.Address
  Location: BecknV2.OnDemand.Types
  buildCustomerLanguage: Beckn.OnDemand.Utils.Search
  getDistance: Beckn.OnDemand.Utils.Search
  getDuration: Beckn.OnDemand.Utils.Search
  getCity: Beckn.OnDemand.Utils.Common
  buildCustomerPhoneNumber: Beckn.OnDemand.Utils.Search
  buildRoutePoints: Beckn.OnDemand.Utils.Search
  HasFlowEnv: Kernel.Types.App
  CacheFlow: Kernel.Types.App
  EsqDBFlow: Kernel.Types.App
  MonadFlow: Kernel.Types.App
  getPickUpLocation: Beckn.OnDemand.Utils.Search
  getDropOffLocation: Beckn.OnDemand.Utils.Search
  getPickUpLocationGps: Beckn.OnDemand.Utils.Search
  getDropOffLocationGps: Beckn.OnDemand.Utils.Search
  LatLong: Kernel.External.Maps
  lat: Kernel.External.Maps
  lon: Kernel.External.Maps
  parseLatLong: Beckn.OnDemand.Utils.Common
  ContextV2: Kernel.Types.Beckn.Context
  Context: BecknV2.OnDemand.Types
  City: Kernel.Types.Beckn.Context
  buildDisabilityTag: Beckn.OnDemand.Utils.Search
  getIsReallocationEnabled: Beckn.OnDemand.Utils.Search
  getTransactionId: Beckn.OnDemand.Utils.Common
  getContextCountry: Beckn.OnDemand.Utils.Common

module: Search
transformer:
  monads:
  - "HasFlowEnv m r '[\"_version\" ::: Text]"
  transformers:
    buildSearchReq:
      params:
        - messageId: Text
        - city: City
        - subscriber: Subscriber
        - req: SearchReqMessage
        - context: Context
      toType: DSearchReq
      mapping:
        messageId: messageId
        transactionId: /~_getTransactionId context
        bapId: subscriber.subscriber_id
        bapUri: subscriber.subscriber_url
        bapCity: city
        bapCountry: /~_getContextCountry context
        pickupLocation: /~_getPickUpLocationGps req & tfLatLong
        pickupTime: /~_getCurrentTime
        dropLocation: /~_getDropOffLocationGps req & tfLatLong
        pickupAddress: /~_getPickUpLocation req & tfAddress
        dropAddrress: /~_getDropOffLocation req & tfAddress
        routeDistance: ~_getDistance req
        routeDuration: ~_getDuration req
        device: Nothing
        customerLanguage: ~_buildCustomerLanguage req
        disabilityTag: ~_buildDisabilityTag req
        customerPhoneNum: ~_buildCustomerPhoneNumber req
        routePoints: ~_buildRoutePoints req
        isReallocationEnabled: ~_getIsReallocationEnabled req

    tfAddress:
      params:
        - location: Location
      toType: Maybe Address
      mapping:
        door: location.locationAddress
        locality : Nothing
        state : Nothing
        country : Nothing
        building : Nothing
        street : Nothing
        city : Nothing
        area_code : Nothing
        ward : Nothing

    tfLatLong:
      params:
        - locationGps: Text
      toType: LatLong
      mapping:
        lat: _parseLatLong locationGps & _lat
        lon: _parseLatLong locationGps & _lon